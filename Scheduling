#include <limits.h>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int min_difficulty(vector<int>& tasks, int d) {
    int n = tasks.size();

    // Check if it's possible to schedule all tasks in d days
    if (n < d) {
        return -1;
    }

    // Initialize the DP array with maximum values
    vector<vector<int>> dp(n + 1, vector<int>(d + 1, INT_MAX));
    dp[0][0] = 0;

    // Fill the DP array iteratively
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= d; ++j) {
            int max_difficulty = 0;
            for (int k = i - 1; k >= 0; --k) {
                max_difficulty = max(max_difficulty, tasks[k]);
                dp[i][j] = min(dp[i][j], dp[k][j - 1] + max_difficulty);
            }
        }
    }

    return dp[n][d];
}

int main() {
    int n, d;
    cin >> n;
    vector<int> tasks(n);
    for (int i = 0; i < n; ++i) {
        cin >> tasks[i];
    }
    cin >> d;

    int result = min_difficulty(tasks, d);
    cout << result << endl;

    return 0;
}*/
#include <bits/stdc++.h>
using namespace std;

const int MAX_N = 300 + 10;

int a[MAX_N];
int dp[11][MAX_N];

int main() {
    cin.tie(nullptr)->sync_with_stdio(false);
    
    int n;
    cin >> n;
    for(int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    int d;
    cin >> d;
    for(int state = 0; state <= d; state++) {
        for(int i = 1; i <= n; i++) {
            dp[state][i] = 1e9;
        }
    }
    dp[0][0] = 0;
    for(int state = 1; state <= d; state++) {
        for(int i = 1; i <= n; i++) {
            for(int j = state; j <= i; j++) {
                int mx = 0;
                for(int k = j; k <= i; k++) {
                    mx = max(mx, a[k]);
                }
                dp[state][i] = min(dp[state][i], dp[state - 1][j - 1] + mx);
            }
        }
    }
    cout << (dp[d][n] == 1e9 ? -1 : dp[d][n]) << '\n';
    return 0;
}
                  
